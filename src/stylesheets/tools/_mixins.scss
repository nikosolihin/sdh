//========================================================
// Functions
//========================================================
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}


//========================================================
// Mixins
//========================================================
@mixin white {
  color: $white;
  * { color: $white; }
}
@mixin cover($pos: center center) {
  background-repeat: no-repeat;
  background-position: $pos;
  background-size: cover;
}
@mixin promote {
  > * {
    position: relative;
    z-index: 1;
  }
}
@mixin overlay($full, $value: null, $index: false) {
  @include promote;
  position: relative;
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    size: 100%;
    transition: all .2s ease-out;
    @if $index {
      z-index: #{$index};
    }
    @if $full {
      @if ($value) {
        background: #{$value};
      } @else {
        background: rgba(0,0,0,.4);
      }
    } @else {
      @if ($value) {
        background: linear-gradient( #{$value} );
      } @else {
        background-color: rgba(13, 4, 0, 0.07);
        background-image: linear-gradient(-15deg, rgba(0, 0, 0, 0.66) 0%, rgba(2, 2, 2, 0.66) 12%, rgba(13, 13, 13, 0) 66%, rgba(19, 19, 19, 0) 97%);
      }
    }
  }
}
@mixin left-slant {
  position: relative;
  z-index: 1;
  &::after {
    content: '';
    display: block;
    position: absolute;
    top: 0;
    left: -.8rem;
    width: 50%;
    height: 100%;
    transform: skewX(-7.5deg);
    background: inherit;
    z-index: -1;
  }
}
@mixin right-slant {
  position: relative;
  z-index: 1;
  &::after {
    content: '';
    display: block;
    position: absolute;
    top: 0;
    right: -.8rem;
    width: 50%;
    height: 100%;
    transform: skewX(-7.5deg);
    background: inherit;
    z-index: -1;
  }
}
@mixin underlink {
  line-height: 1.4;
  border-bottom: 1px dotted #bbb;
  transition: all .15s ease-out;
  &:focus,
  &:hover {
    border-bottom: 1px dotted $brand-primary;
  }
}
@mixin no-outline {
  outline: none !important;
}
@mixin tab-focus {
  outline: thin dotted;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}
@mixin normalist {
  list-style: none;
  padding-left: 0;
}
@mixin square($height: 100%) {
  // Based on https://spin.atomicobject.com/2015/07/14/css-responsive-square/
  &::after {
    content: "";
    display: block;
    padding-bottom: $height;
  }
}
@mixin noselect {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
@mixin hover($before: inherit, $after: $before) {
  transition: all .11s ease-in-out;
  color: $before;
  text-decoration: none;
  &:hover,
  &:focus {
    color: $after;
    text-decoration: none;
  }
}
@mixin fullwidth {
  // Based on https://css-tricks.com/full-width-containers-limited-width-parents/
  position: relative;
  width: 100vw;
  left: 50%;
  right: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
}
@mixin gutter($multiplier: 1) {
  > *:first-of-type {
    padding-right: $multiplier*$single;
  }
  > *:last-of-type {
    padding-left: $multiplier*$single;
  }
  > *:not(:first-of-type):not(:last-of-type) {
    padding: 0 $multiplier*$single;
  }
}

// BREAKPOINTS ////////////////////////////////////////////////
@mixin from($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}
@mixin to($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}
@mixin at($name, $breakpoints: $grid-breakpoints) {
  @include from($name, $breakpoints) {
    @include to($name, $breakpoints) {
      @content;
    }
  }
}
@mixin between($lower, $upper, $breakpoints: $grid-breakpoints) {
  @include from($lower, $breakpoints) {
    @include to($upper, $breakpoints) {
      @content;
    }
  }
}
